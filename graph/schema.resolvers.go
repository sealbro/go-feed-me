package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"errors"
	"strings"
	"time"

	"github.com/sealbro/go-feed-me/graph/model"
	"github.com/sealbro/go-feed-me/internal/storage"
)

// AddResources is the resolver for the addResources field.
func (r *mutationResolver) AddResources(ctx context.Context, resources []*model.NewResource) (*string, error) {
	var errs []error
	for _, resource := range resources {
		errInner := r.ResourceRepository.Upsert(ctx, &storage.Resource{
			Created: time.Now(),
			Url:     strings.TrimSpace(resource.URL),
			Active:  true,
		})

		errs = append(errs, errInner)

	}

	var err error

	if len(errs) != 0 {
		err = errors.Join(errs...)
	}

	return nil, err
}

// Resources is the resolver for the resources field.
func (r *queryResolver) Resources(ctx context.Context, active bool) ([]*model.FeedResource, error) {
	resources := make([]*model.FeedResource, 0)

	list, err := r.ResourceRepository.List(ctx, active)
	if err != nil {
		return nil, err
	}

	for _, resource := range list {
		resources = append(resources, &model.FeedResource{
			URL:       resource.Url,
			Title:     resource.Title,
			Created:   resource.Created,
			Modified:  resource.Modified,
			Published: resource.Published,
			Active:    resource.Active,
		})
	}

	return resources, err
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context, after time.Time) ([]*model.FeedArticle, error) {
	feedArticles := make([]*model.FeedArticle, 0)

	list, err := r.ArticleRepository.List(ctx, after)
	if err != nil {
		return nil, err
	}

	for _, article := range list {
		feedArticles = append(feedArticles, &model.FeedArticle{
			Created:     article.Created,
			Published:   article.Published,
			ResourceID:  article.ResourceId,
			Link:        article.Link,
			Title:       article.Title,
			Description: article.Description,
			Content:     article.Content,
			Author:      article.Author,
			Image:       article.Image,
		})
	}

	return feedArticles, err
}

// Articles is the resolver for the articles field.
func (r *subscriptionResolver) Articles(ctx context.Context) (<-chan []*model.FeedArticle, error) {
	return r.SubscriptionManager.AddSubscriber(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
